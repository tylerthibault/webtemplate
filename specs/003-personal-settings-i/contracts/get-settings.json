{
  "contract_name": "Get User Profile Settings",
  "endpoint": "/settings",
  "method": "GET",
  "authentication": {
    "required": true,
    "type": "session",
    "description": "User must be logged in with valid session cookie"
  },
  "request": {
    "headers": {
      "Cookie": "session=<session_token> (required)"
    },
    "query_parameters": {},
    "body": null
  },
  "response": {
    "success": {
      "status_code": 200,
      "content_type": "application/json",
      "schema": {
        "type": "object",
        "required": ["user"],
        "properties": {
          "user": {
            "type": "object",
            "required": ["id", "full_name", "email", "updated_at"],
            "properties": {
              "id": {
                "type": "integer",
                "description": "User ID",
                "example": 42
              },
              "full_name": {
                "type": "string",
                "minLength": 2,
                "maxLength": 100,
                "description": "User's full name",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address",
                "example": "john@example.com"
              },
              "bio": {
                "type": ["string", "null"],
                "maxLength": 500,
                "description": "User biography (optional)",
                "example": "Software engineer passionate about Python"
              },
              "profile_picture_data": {
                "type": ["string", "null"],
                "description": "Base64-encoded profile picture (lazy loaded, may be null)",
                "example": "/9j/4AAQSkZJRgABAQAA..."
              },
              "profile_picture_mime_type": {
                "type": ["string", "null"],
                "enum": ["image/jpeg", "image/png", "image/gif", null],
                "description": "MIME type of profile picture",
                "example": "image/jpeg"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Account creation timestamp (ISO 8601)",
                "example": "2025-10-01T10:30:00Z"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last profile update timestamp (ISO 8601)",
                "example": "2025-10-06T15:45:30Z"
              }
            }
          }
        }
      },
      "example": {
        "user": {
          "id": 42,
          "full_name": "John Doe",
          "email": "john@example.com",
          "bio": "Software engineer passionate about Python",
          "profile_picture_data": null,
          "profile_picture_mime_type": null,
          "created_at": "2025-10-01T10:30:00Z",
          "updated_at": "2025-10-06T15:45:30Z"
        }
      }
    },
    "errors": [
      {
        "status_code": 401,
        "description": "Not authenticated - no valid session",
        "schema": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "example": "Authentication required"
            }
          }
        }
      },
      {
        "status_code": 403,
        "description": "Forbidden - attempting to access another user's settings (should not be possible via UI)",
        "schema": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "example": "Forbidden"
            }
          }
        }
      }
    ]
  },
  "test_scenarios": [
    {
      "name": "Authenticated user gets their profile",
      "preconditions": ["User logged in with valid session"],
      "request": "GET /settings",
      "expected_status": 200,
      "expected_response_contains": ["user", "email", "full_name", "updated_at"]
    },
    {
      "name": "Unauthenticated user receives 401",
      "preconditions": ["No session cookie"],
      "request": "GET /settings",
      "expected_status": 401,
      "expected_response_contains": ["error"]
    },
    {
      "name": "Profile picture excluded when user has none",
      "preconditions": ["User logged in", "User has no profile picture"],
      "request": "GET /settings",
      "expected_status": 200,
      "expected_response_contains": ["profile_picture_data: null"]
    }
  ],
  "notes": [
    "profile_picture_data should be excluded from response if user has no picture (null)",
    "updated_at must be included in response for concurrent edit detection",
    "Response must include CSRF token for subsequent POST (implementation detail)"
  ]
}
